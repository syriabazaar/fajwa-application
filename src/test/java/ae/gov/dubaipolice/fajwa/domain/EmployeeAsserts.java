package ae.gov.dubaipolice.fajwa.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EmployeeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeAllPropertiesEquals(Employee expected, Employee actual) {
        assertEmployeeAutoGeneratedPropertiesEquals(expected, actual);
        assertEmployeeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeAllUpdatablePropertiesEquals(Employee expected, Employee actual) {
        assertEmployeeUpdatableFieldsEquals(expected, actual);
        assertEmployeeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeAutoGeneratedPropertiesEquals(Employee expected, Employee actual) {
        assertThat(actual)
            .as("Verify Employee auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeUpdatableFieldsEquals(Employee expected, Employee actual) {
        assertThat(actual)
            .as("Verify Employee relevant properties")
            .satisfies(a -> assertThat(a.getFullname()).as("check fullname").isEqualTo(expected.getFullname()))
            .satisfies(a -> assertThat(a.getGradeId()).as("check gradeId").isEqualTo(expected.getGradeId()))
            .satisfies(a -> assertThat(a.getGradeName()).as("check gradeName").isEqualTo(expected.getGradeName()))
            .satisfies(a -> assertThat(a.getHomePhone()).as("check homePhone").isEqualTo(expected.getHomePhone()))
            .satisfies(a -> assertThat(a.getMobileNumber()).as("check mobileNumber").isEqualTo(expected.getMobileNumber()))
            .satisfies(a -> assertThat(a.getAssigmentId()).as("check assigmentId").isEqualTo(expected.getAssigmentId()))
            .satisfies(a -> assertThat(a.getDateOfAssignment()).as("check dateOfAssignment").isEqualTo(expected.getDateOfAssignment()))
            .satisfies(a -> assertThat(a.getJobName()).as("check jobName").isEqualTo(expected.getJobName()))
            .satisfies(a -> assertThat(a.getAddress()).as("check address").isEqualTo(expected.getAddress()))
            .satisfies(a -> assertThat(a.getOrganizationId()).as("check organizationId").isEqualTo(expected.getOrganizationId()))
            .satisfies(a -> assertThat(a.getOrganization()).as("check organization").isEqualTo(expected.getOrganization()))
            .satisfies(a -> assertThat(a.getNationalIdentifier()).as("check nationalIdentifier").isEqualTo(expected.getNationalIdentifier())
            )
            .satisfies(a -> assertThat(a.getUid()).as("check uid").isEqualTo(expected.getUid()))
            .satisfies(a -> assertThat(a.getParentDepartmentId()).as("check parentDepartmentId").isEqualTo(expected.getParentDepartmentId())
            )
            .satisfies(a -> assertThat(a.getSlmMilitaryFlag()).as("check slmMilitaryFlag").isEqualTo(expected.getSlmMilitaryFlag()))
            .satisfies(a -> assertThat(a.getMilitaryFirstName()).as("check militaryFirstName").isEqualTo(expected.getMilitaryFirstName()))
            .satisfies(a -> assertThat(a.getSlmName()).as("check slmName").isEqualTo(expected.getSlmName()))
            .satisfies(a -> assertThat(a.getAge()).as("check age").isEqualTo(expected.getAge()))
            .satisfies(a -> assertThat(a.getDateOfHire()).as("check dateOfHire").isEqualTo(expected.getDateOfHire()))
            .satisfies(a -> assertThat(a.getDateOfLastHire()).as("check dateOfLastHire").isEqualTo(expected.getDateOfLastHire()))
            .satisfies(a -> assertThat(a.getGender()).as("check gender").isEqualTo(expected.getGender()))
            .satisfies(a -> assertThat(a.getJobId()).as("check jobId").isEqualTo(expected.getJobId()))
            .satisfies(a -> assertThat(a.getNationalityCode()).as("check nationalityCode").isEqualTo(expected.getNationalityCode()))
            .satisfies(a -> assertThat(a.getNationality()).as("check nationality").isEqualTo(expected.getNationality()))
            .satisfies(a -> assertThat(a.getPersonStartDate()).as("check personStartDate").isEqualTo(expected.getPersonStartDate()))
            .satisfies(a -> assertThat(a.getOriginalDateOfHire()).as("check originalDateOfHire").isEqualTo(expected.getOriginalDateOfHire())
            )
            .satisfies(a -> assertThat(a.getSupervisorId()).as("check supervisorId").isEqualTo(expected.getSupervisorId()))
            .satisfies(a -> assertThat(a.getSupervisorFullName()).as("check supervisorFullName").isEqualTo(expected.getSupervisorFullName())
            )
            .satisfies(a ->
                assertThat(a.getParentDepartmentName()).as("check parentDepartmentName").isEqualTo(expected.getParentDepartmentName())
            )
            .satisfies(a -> assertThat(a.getSectionId()).as("check sectionId").isEqualTo(expected.getSectionId()))
            .satisfies(a -> assertThat(a.getSectionName()).as("check sectionName").isEqualTo(expected.getSectionName()))
            .satisfies(a ->
                assertThat(a.getAdjustedServiceDate()).as("check adjustedServiceDate").isEqualTo(expected.getAdjustedServiceDate())
            )
            .satisfies(a -> assertThat(a.getQualificationType()).as("check qualificationType").isEqualTo(expected.getQualificationType()))
            .satisfies(a ->
                assertThat(a.getQualificationSpecification())
                    .as("check qualificationSpecification")
                    .isEqualTo(expected.getQualificationSpecification())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeUpdatableRelationshipsEquals(Employee expected, Employee actual) {
        // empty method
    }
}
