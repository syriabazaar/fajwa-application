package ae.gov.dubaipolice.fajwa.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class JobVacantAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertJobVacantAllPropertiesEquals(JobVacant expected, JobVacant actual) {
        assertJobVacantAutoGeneratedPropertiesEquals(expected, actual);
        assertJobVacantAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertJobVacantAllUpdatablePropertiesEquals(JobVacant expected, JobVacant actual) {
        assertJobVacantUpdatableFieldsEquals(expected, actual);
        assertJobVacantUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertJobVacantAutoGeneratedPropertiesEquals(JobVacant expected, JobVacant actual) {
        assertThat(actual)
            .as("Verify JobVacant auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertJobVacantUpdatableFieldsEquals(JobVacant expected, JobVacant actual) {
        // empty method

    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertJobVacantUpdatableRelationshipsEquals(JobVacant expected, JobVacant actual) {
        assertThat(actual)
            .as("Verify JobVacant relationships")
            .satisfies(a -> assertThat(a.getDepartment()).as("check department").isEqualTo(expected.getDepartment()))
            .satisfies(a -> assertThat(a.getJobDesc()).as("check jobDesc").isEqualTo(expected.getJobDesc()));
    }
}
